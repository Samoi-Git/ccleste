#include "sdl12main.c"
class CelesteGame {
	public:
	CelesteGame() {
		SDL_CHECK(SDL_Init(SDL_INIT_AUDIO | SDL_INIT_VIDEO) == 0);
		SDL_InitSubSystem(SDL_INIT_GAMECONTROLLER);
		SDL_GameControllerAddMappingsFromRW(SDL_RWFromFile("gamecontrollerdb.txt", "rb"), 1);
		int videoflag = SDL_SWSURFACE | SDL_HWPALETTE;
		SDL_CHECK(screen = SDL_SetVideoMode(PICO8_W*scale, PICO8_H*scale, 32, videoflag));
		SDL_WM_SetCaption("Celeste", NULL);
		int mixflag = MIX_INIT_OGG;
		if (Mix_Init(mixflag) != mixflag) {
			ErrLog("Mix_Init: %s\n", Mix_GetError());
		}
		if (Mix_OpenAudio(22050, AUDIO_S16SYS, 1, 1024) < 0) {
			ErrLog("Mix_Init: %s\n", Mix_GetError());
		}
		ResetPalette();
		SDL_ShowCursor(0);


		printf("game state size %gkb\n", Celeste_P8_get_state_size()/1024.);

		printf("now loading...\n");

		{
			const unsigned char loading_bmp[] = {
				0x42,0x4d,0xca,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x82,0x00,
				0x00,0x00,0x6c,0x00,0x00,0x00,0x24,0x00,0x00,0x00,0x09,0x00,
				0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x48,0x00,
				0x00,0x00,0x23,0x2e,0x00,0x00,0x23,0x2e,0x00,0x00,0x02,0x00,
				0x00,0x00,0x02,0x00,0x00,0x00,0x42,0x47,0x52,0x73,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,
				0x00,0x00,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,
				0x00,0x00,0x66,0x3e,0xf1,0x24,0xf0,0x00,0x00,0x00,0x49,0x44,
				0x92,0x24,0x90,0x00,0x00,0x00,0x49,0x3c,0x92,0x24,0x90,0x00,
				0x00,0x00,0x49,0x04,0x92,0x24,0x90,0x00,0x00,0x00,0x46,0x38,
				0xf0,0x3c,0xf0,0x00,0x00,0x00,0x40,0x00,0x12,0x00,0x00,0x00,
				0x00,0x00,0xc0,0x00,0x10,0x00,0x00,0x00,0x00,0x00
			};
			const unsigned int loading_bmp_len = 202;
			SDL_RWops* rw = SDL_RWFromConstMem(loading_bmp, loading_bmp_len);
			SDL_Surface* loading = SDL_LoadBMP_RW(rw, 1);
			if (!loading) goto skip_load;

			SDL_Rect rc = {60, 60};
			SDL_BlitSurface(loading,NULL,screen,&rc);
			
			SDL_Flip(screen);
			SDL_FreeSurface(loading);
		} skip_load:

		LoadData();

		int pico8emu(CELESTE_P8_CALLBACK_TYPE call, ...);
		Celeste_P8_set_call_func(pico8emu);

		//for reset
		initial_game_state = SDL_malloc(Celeste_P8_get_state_size());
		if (initial_game_state) Celeste_P8_save_state(initial_game_state);

		if (TAS) {
			// a consistent seed for tas playback
			Celeste_P8_set_rndseed(8);
		} else {
			Celeste_P8_set_rndseed((unsigned)(time(NULL) + SDL_GetTicks()));
		}

		Celeste_P8_init();

		printf("ready\n");
		{
			FILE* start_fullscreen_f = fopen("ccleste-start-fullscreen.txt", "r");
			const char* start_fullscreen_v = getenv("CCLESTE_START_FULLSCREEN");
			if (start_fullscreen_f || (start_fullscreen_v && *start_fullscreen_v)) {
				SDL_WM_ToggleFullScreen(screen);
			}
			if (start_fullscreen_f) fclose(start_fullscreen_f);
		}

		

	}
	void nextFrame(void) {
		mainLoop();
	}


	~CelesteGame() {
		if (game_state) SDL_free(game_state);
		if (initial_game_state) SDL_free(initial_game_state);

		SDL_FreeSurface(gfx);
		SDL_FreeSurface(font);
		for (int i = 0; i < (sizeof snd)/(sizeof *snd); i++) {
			if (snd[i]) Mix_FreeChunk(snd[i]);
		}
		for (int i = 0; i < (sizeof mus)/(sizeof *mus); i++) {
			if (mus[i]) Mix_FreeMusic(mus[i]);
		}

		Mix_CloseAudio();
		Mix_Quit();
		SDL_Quit();
	}



};
int main() {
	CelesteGame game = CelesteGame();
	game.nextFrame();
	return 0;



}